// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String  @id @default(cuid())
  name          String?
  email         String? @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
}

model VerificationToken {
  identifier String @id @unique
  token      String @unique
  expires    DateTime
}

model Topic {
  id          String   @id @default(cuid())
  slug        String   @unique
  description String
  posts       Post[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  userId      String
  topicId     String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic       Topic    @relation(fields: [topicId], references: [id])
  comments    Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  userId    String
  parentId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent    Comment? @relation("CommentTree", fields: [parentId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("CommentTree")
}
